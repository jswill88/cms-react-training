import Head from "next/head";
import styles from "styles/Home.module.css";
import md5 from "md5";
import { Montserrat, Karla } from "@next/font/google";
import "@fortawesome/fontawesome-svg-core/styles.css";
import { CREATORS, CHARACTERS } from "lib/filterData";
import {
	faBolt,
	faFilter,
	faTimes,
	faAngleLeft,
	faAngleRight,
	faBars,
	faAngleDown,
} from "@fortawesome/free-solid-svg-icons";
import { ComicGrid, Header, HeroImage, IntroPanel, Footer } from "components";
import AppContextProvider from "state/AppContext";
import { BuildDataProps, FetchFull } from "types";
// Using this syntax, because error is caused using other syntax for whatever reason
const { library, config } = require("@fortawesome/fontawesome-svg-core");

const karla = Karla({ variable: "--karla", subsets: ["latin"] });
const montserrat = Montserrat({ variable: "--montserrat", subsets: ["latin"] });

config.autoAddCss = false;
library.add(
	faBolt,
	faFilter,
	faTimes,
	faAngleLeft,
	faAngleRight,
	faBars,
	faAngleDown
);

export default function Home({ buildData }: BuildDataProps) {
	return (
		<div
			className={`${styles.container} ${karla.variable} ${montserrat.variable}`}
		>
			<Head>
				<title>CMS React Training</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<AppContextProvider>
				<Header />
				<HeroImage />
				<main className={styles.main}>
					<IntroPanel />
					<ComicGrid buildData={buildData} />
				</main>
				<Footer />
			</AppContextProvider>
		</div>
	);
}

export const getStaticProps = async () => {
	const BASE_URL_START = "https://gateway.marvel.com/v1/public";
	const BASE_URL_END = `/comics`;

	const privateKey = process.env.MARVEL_PRIVATE_KEY;
	const apikey = process.env.apiKey;
	const ts = Date.now().toString();
	const hash = md5(ts + privateKey + apikey);

	let params = new URLSearchParams({
		ts,
		apikey,
		hash,
		limit: "15",
	});

	const allData = {
		creators: {},
		characters: {},
	};

	type Filters = {
		[K in "creators" | "characters"]: {
			name: string;
			value: string;
			url?: string;
		}[];
	};

	let filters: Filters = {
		creators: CREATORS,
		characters: CHARACTERS,
	};

	for (let key in filters) {
		filters[key] = filters[key].map((obj) => ({
			...obj,
			url: `${BASE_URL_START}/${key}/${obj.value}/${BASE_URL_END}?${params}`,
		}));
	}

	const fetchData = (url, filterType, value?) => {
		return new Promise<void>(async (resolve, reject) => {
			try {
				const res = await fetch(url);
				const data: FetchFull = await res.json();
				data.status = data.status === "Ok" ? "success" : "error";
				if (value) {
					allData[filterType][value] = data;
					return resolve();
				}
				allData[filterType] = data;
				resolve();
			} catch (e) {
				reject(e);
			}
		});
	};

	await Promise.allSettled([
		fetchData(`${BASE_URL_START}${BASE_URL_END}?${params}`, "initial"),
		...filters.creators.map((creator) =>
			fetchData(creator.url, "creators", creator.value)
		),
		...filters.characters.map((characters) =>
			fetchData(characters.url, "characters", characters.value)
		),
	]);

	return {
		props: {
			buildData: allData,
		},
	};
};
